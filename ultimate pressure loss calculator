function total_pressure_loss_sliders_checkboxes_value_10_EC_PrioAir()
    % Clear previous variables and close figures
    clear;
    clc;
    close all;

    %% Given parameters
    n = 0.65; % Exponent for the Homes pressure loss equation
    D_h_inches = 10; % Diameter of the duct in inches (use 10" or 8" ducts depending on needs)

    % Define a range of flow rates (CFM) from 0 to 1300
    flow_rate_CFM = linspace(0, 1300, 100); % 100 evenly spaced points between 0 and 1300 CFM

    % Initialize variables for sliders
    C_value = 78.6; % Initial C value (for the Homes pressure loss equation)
    filter_pressure_drop = 1.2136; % Initial filter pressure drop slope in Pa and CFM
    L = 130; % Initial length of the duct in feet

    % Initialize checkboxes states
    use_duct_loss = true;
    use_homes_loss = true;
    use_filter_loss = true;
    use_green_dashed_line = true; % Initial state for the green dashed line checkbox

    % Create a figure for the total pressure loss plot
    fig = figure('Name', 'Total Pressure Loss vs Flow Rate', 'NumberTitle', 'off');

    % Create axes for the total pressure loss plot
    ax_total = axes('Parent', fig, 'Position', [0.13 0.3 0.775 0.6]);
    hold(ax_total, 'on');

    % Set labels, title, and grid for the total pressure loss plot
    xlabel(ax_total, 'Flow Rate (Q) [CFM]');
    ylabel(ax_total, 'Pressure (P) [Pa]');
    title(ax_total, 'Total Pressure Loss vs Flow Rate');
    grid(ax_total, 'on');

    % Set fixed axis limits for the plot
    xlim(ax_total, [0 1300]); % Fix X-axis (Flow Rate) from 0 to 1300 CFM
    ylim(ax_total, [0 400]);  % Fix Y-axis (Pressure Loss) from 0 to 400 Pa (adjust based on max values)

    % Create a plot for total pressure loss (blue line)
    total_plot = plot(flow_rate_CFM, zeros(size(flow_rate_CFM)), 'b-', 'LineWidth', 2, 'DisplayName', 'Total Pressure Loss');

    % Plot the fixed red dashed line (PrioAir EC 10 Fan)
    fixed_flow_rate_CFM = [1237, 1156, 1079, 997, 900, 769, 118, 0];
    fixed_pressure_Pa = [0, 49.8, 99.5, 149, 199, 248.8, 374, 399];
    fixed_line_plot = plot(fixed_flow_rate_CFM, fixed_pressure_Pa, 'r--', 'LineWidth', 2, 'DisplayName', 'PrioAir EC 10 Fan');

    % Plot the green dashed line (Squirrel Cage Fan)
    Q_m3h = [0, 490];  % Flow Rate in mÂ³/h
    P_Pa = [850, 0];   % Pressure Drop in Pa
    Q_CFM = Q_m3h * 0.588577; % Convert flow rate to CFM
    green_dashed_line = plot(Q_CFM, P_Pa, 'g--', 'LineWidth', 1.5, 'DisplayName', 'Squirrel Cage Fan');

    % Add a legend to label the lines
    legend(ax_total, 'show');

    %% Sliders for dynamic adjustment (C value, filter pressure drop, duct length)
    % Labels for the left and right sides of the C value slider
    uicontrol('Style', 'text', 'Position', [150, 50, 160, 20], 'String', 'Tight Home: 500 CFM @ 50 Pa'); % Left of slider
    uicontrol('Style', 'text', 'Position', [510, 50, 220, 20], 'String', 'Leaky Home: 4000 CFM @ 50 Pa'); % Right of slider
    
    % Slider for Adjust C Value
    uicontrol('Style', 'text', 'Position', [350, 50, 100, 20], 'String', 'Adjust C');
    slider_C = uicontrol('Style', 'slider', ...
        'Min', 39, 'Max', 315, 'Value', C_value, ...
        'Position', [200, 20, 300, 20], ...
        'Callback', @(src, event) updatePlot());

    % Labels for the left and right sides of the filter pressure drop slider
    uicontrol('Style', 'text', 'Position', [150, 100, 100, 20], 'String', 'MERV 13'); % Left of slider
    uicontrol('Style', 'text', 'Position', [510, 100, 100, 20], 'String', 'HEPA 10'); % Right of slider

    % Slider for Filter Pressure Drop
    uicontrol('Style', 'text', 'Position', [350, 100, 100, 20], 'String', 'Filter Pressure Drop');
    slider_filter = uicontrol('Style', 'slider', ...
        'Min', 0.5287, 'Max', 1.2136, 'Value', filter_pressure_drop, ...
        'Position', [200, 80, 300, 20], ...
        'Callback', @(src, event) updatePlot());

    % Labels for the left and right sides of the duct length slider
    uicontrol('Style', 'text', 'Position', [150, 150, 40, 20], 'String', '30'); % Left of slider (Min value)
    uicontrol('Style', 'text', 'Position', [510, 150, 40, 20], 'String', '600'); % Right of slider (Max value)

    % Slider for Duct Length
    uicontrol('Style', 'text', 'Position', [350, 150, 100, 20], 'String', 'Duct Length');
    slider_length = uicontrol('Style', 'slider', ...
        'Min', 30, 'Max', 600, 'Value', L, ...
        'Position', [200, 130, 300, 20], ...
        'Callback', @(src, event) updatePlot());

    % Labels to display the values of sliders
    label_C = uicontrol('Style', 'text', 'Position', [550, 20, 50, 20], 'String', ['C: ' num2str(C_value)]);
    label_filter = uicontrol('Style', 'text', 'Position', [550, 80, 100, 20], 'String', ['Filter: ' num2str(filter_pressure_drop, '%.4f') ' slope']);
    label_length = uicontrol('Style', 'text', 'Position', [550, 130, 100, 20], 'String', ['Length: ' num2str(L) ' ft']);
    
    % Add a text field to display the achievable pressure
    y_value_display = uicontrol('Style', 'text', 'Position', [600, 50, 200, 20], ...
                                'String', 'Achievable Pressure: 0', 'FontSize', 10);

    % Add a text field to display the flow rate (x-intercept)
    x_intercept_display = uicontrol('Style', 'text', 'Position', [600, 80, 200, 20], ...
                                    'String', 'Flow Rate (Q): 0 CFM', 'FontSize', 10);

    %% Checkboxes for enabling/disabling the components
    uicontrol('Style', 'checkbox', 'Position', [20, 200, 200, 20], 'String', 'Use Duct Pressure Loss', 'Value', use_duct_loss, ...
        'Callback', @(src, event) toggleDuctLoss(src));

    uicontrol('Style', 'checkbox', 'Position', [20, 230, 200, 20], 'String', 'Use Homes Pressure Loss', 'Value', use_homes_loss, ...
        'Callback', @(src, event) toggleHomesLoss(src));

    uicontrol('Style', 'checkbox', 'Position', [20, 260, 200, 20], 'String', 'Use Filter Pressure Drop', 'Value', use_filter_loss, ...
        'Callback', @(src, event) toggleFilterLoss(src));

    % Checkbox to toggle the green dashed line
    uicontrol('Style', 'checkbox', 'Position', [20, 290, 200, 20], 'String', 'Show Squirrel Cage Fan', 'Value', use_green_dashed_line, ...
        'Callback', @(src, event) toggleGreenDashedLine(src));

    %% Function to update the total pressure loss plot dynamically
    function updatePlot()
        % Get current slider values
        C_value = get(slider_C, 'Value');
        filter_pressure_drop = get(slider_filter, 'Value');
        L = get(slider_length, 'Value');

        % Update the labels to display the current values of sliders
        set(label_C, 'String', ['C: ' num2str(round(C_value))]);
        set(label_filter, 'String', ['Filter: ' num2str(filter_pressure_drop, '%.4f') ' slope']);
        set(label_length, 'String', ['Length: ' num2str(round(L)) ' ft']);

        % Initialize the total pressure drop (reset for recalculation)
        total_pressure_drop_Pa = zeros(size(flow_rate_CFM));

        % Calculate duct pressure loss (if enabled)
        if use_duct_loss
            duct_pressure_loss_Pa = 0.2717287 * (flow_rate_CFM.^1.9) ./ (D_h_inches.^5.02) * L;
            total_pressure_drop_Pa = total_pressure_drop_Pa + duct_pressure_loss_Pa;
        end

        % Calculate homes pressure loss (if enabled)
        if use_homes_loss
            homes_pressure_loss_Pa = (flow_rate_CFM / C_value).^(1/n);
            total_pressure_drop_Pa = total_pressure_drop_Pa + homes_pressure_loss_Pa;
        end

        % Calculate filter pressure loss (if enabled)
        if use_filter_loss
            filter_pressure_drop_Pa = filter_pressure_drop * flow_rate_CFM;
            total_pressure_drop_Pa = total_pressure_drop_Pa + filter_pressure_drop_Pa;
        end

        % Update the blue line for total pressure loss
        set(total_plot, 'YData', total_pressure_drop_Pa);

        % Redraw the plot
        drawnow;

        % Call the function to find the intersection, add lines, and calculate achievable pressure
        findIntersectionAndAddLines(total_plot, fixed_line_plot, C_value);
    end

    %% Function to find the intersection, add vertical and horizontal lines, shaded area, and display achievable pressure
    function findIntersectionAndAddLines(total_plot, fixed_line_plot, C_value)
        persistent vert_line_handle hor_line_handle shade_handle

        % If the lines and shaded area exist, delete them before drawing new ones
        if ~isempty(vert_line_handle) && isvalid(vert_line_handle)
            delete(vert_line_handle);
        end
        if ~isempty(hor_line_handle) && isvalid(hor_line_handle)
            delete(hor_line_handle);
        end
        if ~isempty(shade_handle) && isvalid(shade_handle)
            delete(shade_handle);
        end
        
        % Get data from the total pressure loss line
        total_pressure_y = get(total_plot, 'YData');
        total_flow_rate_x = get(total_plot, 'XData');
        
        % Get data from the fixed line (red dashed line)
        fixed_pressure_y = get(fixed_line_plot, 'YData');
        fixed_flow_rate_x = get(fixed_line_plot, 'XData');
        
        % Interpolate fixed line data to match the length of the total plot data
        interpolated_fixed_pressure_y = interp1(fixed_flow_rate_x, fixed_pressure_y, total_flow_rate_x, 'linear', 'extrap');
        
        % Find the index of the closest point between the total plot and interpolated fixed line
        [~, idx] = min(abs(total_pressure_y - interpolated_fixed_pressure_y)); 
        
        % Get the corresponding x (flow rate) and y (pressure) values for the intersection
        intersection_flow_rate = total_flow_rate_x(idx); % This is Q (flow rate)
        intersection_pressure = total_pressure_y(idx); % Pressure corresponding to that flow rate

        % Calculate the achievable pressure (dP) using the equation: Q = C * (dP)^n
        achievable_pressure = (intersection_flow_rate / C_value)^(1/n);

        % Update the display for the flow rate (x-intercept)
        set(x_intercept_display, 'String', ['Flow Rate (Q): ', num2str(intersection_flow_rate, '%.2f') ' CFM']);
        
        % Plot vertical and horizontal lines at the intersection (but keep them invisible)
        vert_line_handle = xline(intersection_flow_rate, 'k--', 'LineWidth', 1.5, 'Visible', 'off'); % Invisible vertical line
        hor_line_handle = yline(intersection_pressure, 'k--', 'LineWidth', 1.5, 'Visible', 'off');  % Invisible horizontal line
        
        % Define the area to be shaded (left of the vertical line and below the red dashed line)
        x_shaded = total_flow_rate_x(total_flow_rate_x <= intersection_flow_rate); % Points left of the vertical line
        y_bottom = zeros(size(x_shaded)); % X-axis (y = 0) as the bottom boundary
        y_top = interpolated_fixed_pressure_y(total_flow_rate_x <= intersection_flow_rate); % Red dashed line (fixed line)

        % Create the shaded area (green) excluding the region above the horizontal line
        y_top(y_top > intersection_pressure) = intersection_pressure; % Exclude the area above the intersection
        shade_handle = fill([x_shaded, fliplr(x_shaded)], [y_bottom, fliplr(y_top)], 'g', ...
                            'FaceAlpha', 0.3, 'EdgeColor', 'none', 'DisplayName', 'Remaining Fan Capability Region');

        % Update the text display with the calculated achievable pressure
        set(y_value_display, 'String', ['Achievable Pressure: ', num2str(achievable_pressure, '%.2f') ' Pa']);
        
        % Refresh the legend to include the shaded area
        legend('show');
    end

    %% Checkbox callback functions
    function toggleDuctLoss(src)
        use_duct_loss = get(src, 'Value');
        updatePlot();
    end

    function toggleHomesLoss(src)
        use_homes_loss = get(src, 'Value');
        updatePlot();
    end

    function toggleFilterLoss(src)
        use_filter_loss = get(src, 'Value');
        updatePlot();
    end

    function toggleGreenDashedLine(src)
        use_green_dashed_line = get(src, 'Value');
        if use_green_dashed_line
            set(green_dashed_line, 'Visible', 'on');
        else
            set(green_dashed_line, 'Visible', 'off');
        end
    end

    % Initial calculation and plotting
    updatePlot();
end
