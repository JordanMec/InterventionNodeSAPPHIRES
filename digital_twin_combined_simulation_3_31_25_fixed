function digital_twin_combined_simulation_3_31_25_fixed()
%DIGITAL_TWIN_COMBINED_SIMULATION_3_31_25_FIXED
% This function simulates house pressure control and HEPA filter loading
% over a 6‐hour period. It has been modified so that the PID controller
% can stabilize even when the house pressure goes negative. The modifications
% include an anti-windup mechanism that resets the integral term when the error
% changes sign, and a backward Euler pressure update that now directly incorporates
% the stack effect and exhaust fan flows before updating the PID controller.

%% Clear Workspace, Command Window, and Close All Figures
clear; clc; close all;

% Initialize shared variables for nested functions.
enableExhaustFan = true;
enableStackEffect = false;  % Stack effect is disabled by default.

%% Initialize variables for GUI input
blowerDoorValue = [];
targetPressureValue = [];

%% ===============================
%% 1. House Pressure Control Simulation Setup with GUI Options
%% ===============================
% Fixed home leakage exponent:
n_homes = 0.65;
% Create GUI for Simulation Options. Increase figure height to accommodate extra input.
guiFig = figure('Name','Simulation Options','NumberTitle','off',...
    'MenuBar','none','ToolBar','none','Position',[500,500,300,260]);
% Target Pressure Input: Ask user to enter target pressure for the PID controller
uicontrol('Style','text','String','Target Pressure (Pa):',...
    'Position',[50,220,200,20],'HorizontalAlignment','left');
targetPressureEdit = uicontrol('Style','edit','String','0',...
    'Position',[50,195,200,25]);
% Blower Door Input: Ask user to enter blower door CFM at 50 Pa
uicontrol('Style','text','String','Blower Door CFM at 50 Pa:',...
    'Position',[50,170,200,20],'HorizontalAlignment','left');
blowerDoorEdit = uicontrol('Style','edit','String','1150',...
    'Position',[50,145,200,25]);
% Checkbox for Exhaust Fan
uicontrol('Style','checkbox','String','Enable Exhaust Fan',...
    'Value',1, 'Position',[50,110,200,30],...
    'Callback',@exhaustCheckboxCallback);
% Checkbox for Stack Effect (default off)
uicontrol('Style','checkbox','String','Enable Stack Effect',...
    'Value',0, 'Position',[50,70,200,30],...
    'Callback',@stackCheckboxCallback);
% Run Simulation Button – pass the edit handles into the callback
uicontrol('Style','pushbutton','String','Run Simulation',...
    'Position',[100,10,100,30],'Callback',@(src,event) runSimulationCallback(src,event,blowerDoorEdit,targetPressureEdit));
uiwait(guiFig);
% After the GUI closes, retrieve the inputs.
blower_door_input = blowerDoorValue;
target_pressure = targetPressureValue;  % Use target pressure from GUI

% Compute effective C_value so that Q(50 Pa) equals the blower door input.
C_value = blower_door_input / (50^(n_homes));
% Define the home leakage function with the updated C_value.
homes_loss = @(Q) (Q / C_value).^(1/n_homes);

% Define effectiveC and n_leak to be used in the pressure update loop.
effectiveC = C_value;
n_leak = n_homes;

%% ===============================
%% Simulation Settings for House Pressure Control
%% ===============================
total_time = 21600;          % Total simulation time (s) = 6 hrs.
dt_control = 1;              % Control update interval (s)
num_control_steps = total_time / dt_control;  % Number of control steps
% House & Duct Parameters
outside_pressure = 0;        % Outside pressure (gauge = 0)
D_h_inches = 10;             % Duct diameter (inches)
L = 130;                     % Duct length (feet)
% Filter loss parameter (no longer used in pressure calc)
filter_slope = 1.2136;
% Duct loss function:
duct_loss = @(Q) 0.2717287 * (Q.^1.9) / (D_h_inches^5.02) * L;
% Filter loss function:
filter_loss = @(Q) filter_slope * Q;
% Total system loss:
total_loss = @(Q) duct_loss(Q) + homes_loss(Q) + filter_loss(Q);
%% Fan Curve Parameters (PrioAir EC 10 data)
fixed_flow_rate_CFM = [1237, 1156, 1079, 997, 900, 769, 118, 0];
fixed_pressure_Pa   = [0, 49.8, 99.5, 149, 199, 248.8, 374, 399];
[fc, idx] = sort(fixed_flow_rate_CFM);
fp = fixed_pressure_Pa(idx);
fan_pressure = @(Q, wiper) (wiper/128) * interp1(fc, fp, Q, 'linear', 'extrap');
%% Leakage & Exhaust Fan Parameters
C_normal   = 90;
C_exhaust  = 180;
n_default  = 0.65;
n_exhaust  = 0.55;
exhaust_flow_CFM = 150;
%% PID Controller Parameters
initial_wiper = 0;  % Starting wiper value.
wiper = initial_wiper;
Kp = 30;    % Proportional gain
Ki = 0.05;  % Integral gain
Kd = 1;     % Derivative gain
min_wiper = 0;
max_wiper = 128;
integral_error = 0;
previous_error = 0;
%% Stack Effect Parameters
CFM50_stack = 1150;
H_ft_stack = 20;
H_m_stack = H_ft_stack * 0.3048;
n_stack = 0.65;
T_indoor_F = 68;
T_indoor_K = (T_indoor_F - 32) * 5/9 + 273.15;
%% Energy Consumption Parameters
max_wattage = 164;   % Maximum blower wattage (W)
on_peak_rate = 0.3047;
off_peak_rate = 0.0846;
%% HEPA Filter Parameters (Integrated with main simulation)
P0 = 250;                    % Clean filter pressure drop (Pa)
filter_area = 10.92;         % Filter area (m^2)
v_test = 2.5;                % Test velocity (m/s)
dust_capacity_per_m2 = 50;   % (g/m^2)
dust_capacity_total = dust_capacity_per_m2 * filter_area;
K = P0 / dust_capacity_total;  % Adjust K for dust accumulation effect.
filter_replacement_cost = 100; % Replacement cost in $
conc_bin1 = 4000e-6;
conc_bin2 = 8000e-6;
conc_bin3 = 5000e-6;
conc_bin4 = 1000e-6;
eff_bin1 = 0.90;
eff_bin2 = 0.85;
eff_bin3 = 0.95;
eff_bin4 = 0.99;

%% Initialize Logging Arrays
control_time             = zeros(1, num_control_steps);
pressure_series          = zeros(1, num_control_steps); % House pressure (Pa)
measured_pressure_series = zeros(1, num_control_steps); % Sensor reading (Pa)
wiper_series             = zeros(1, num_control_steps);
Qfan_series              = zeros(1, num_control_steps);
error_series             = zeros(1, num_control_steps);
stack_series             = zeros(1, num_control_steps);
exhaust_series           = zeros(1, num_control_steps);
power_series             = zeros(1, num_control_steps);
cost_series              = zeros(1, num_control_steps);
cumulative_cost_energy   = zeros(1, num_control_steps);
filter_pressure_series   = zeros(1, num_control_steps);
dust_total_series        = zeros(1, num_control_steps);
dust_bin1_series         = zeros(1, num_control_steps);
dust_bin2_series         = zeros(1, num_control_steps);
dust_bin3_series         = zeros(1, num_control_steps);
dust_bin4_series         = zeros(1, num_control_steps);
filter_cost_series       = zeros(1, num_control_steps);
filter_life_series       = zeros(1, num_control_steps);
cumulative_cost_total    = zeros(1, num_control_steps);

% Initialize states.
actual_pressure = target_pressure;  % Starting house pressure.
dust_bin1 = 0; dust_bin2 = 0; dust_bin3 = 0; dust_bin4 = 0;
dust_total = 0;
filter_pressure = P0;
exhaust_state = 0;  % (0 = off, 1 = full speed)
Q_blower = 0;       % Actual blower fan flow (CFM)

%% ===============================
%% Main Simulation Loop (Control update every 1 s)
%% ===============================
for cs = 1:num_control_steps
    current_time = (cs-1)*dt_control;
    control_time(cs) = current_time;
    
    %% --- UPDATE ACTUATOR FLOWS FIRST ---
    % Update exhaust fan (using existing ramp logic).
    if enableExhaustFan
        if (current_time >= 1800 && current_time < 4500) || ...
           (current_time >= 8100 && current_time < 10800) || ...
           (current_time >= 14400 && current_time < 17100)
             desired_exhaust_state = 1;
        else
             desired_exhaust_state = 0;
        end
        if desired_exhaust_state == 1
             exhaust_state = min(1, exhaust_state + dt_control/4);
        else
             exhaust_state = max(0, exhaust_state - dt_control/2);
        end
    else
         exhaust_state = 0;
         desired_exhaust_state = 0;
    end
    Q_exhaust = exhaust_state * exhaust_flow_CFM;
    exhaust_series(cs) = Q_exhaust;
    
    % Update stack effect (explicit computation using conventional formula).
    if enableStackEffect
        T_time_points = [0, 7200, 14400, 21600];
        T_values = [68, 98, 48, 68];
        T_outdoor_F = interp1(T_time_points, T_values, current_time, 'pchip');
        T_outdoor_K = (T_outdoor_F - 32) * 5/9 + 273.15;
        deltaP_stack = 9.81 * H_m_stack * (T_indoor_K - T_outdoor_K) / T_indoor_K;
        cfm_stack = CFM50_stack * (abs(deltaP_stack)/50)^n_stack;
    else
        cfm_stack = 0;
    end
    stack_series(cs) = cfm_stack;
    
    %% --- COMPUTE BLOWER FAN FLOW ---
    % Compute commanded flow (Q_cmd) using the current wiper.
    f = @(Q) fan_pressure(Q, wiper) - total_loss(Q);
    try
        Q_cmd = fzero(f, 500);
    catch
        Q_cmd = 0;
    end
    Q_cmd = max(Q_cmd, 0);
    % Update blower fan ramp dynamics.
    Q_max = 1237; % Maximum fan flow (CFM) from the fan curve.
    if cs == 1
         Q_blower = Q_cmd;
    else
         tau = 6 * (1 - Q_blower / Q_max) + 1;
         Q_blower = Q_blower + (dt_control / tau) * (Q_cmd - Q_blower);
    end
    Qfan_series(cs) = Q_blower;
    
    %% --- BACKWARD EULER PRESSURE UPDATE ---
    p_old = actual_pressure;
    p_new = p_old;
    tolerance = 1e-6;
    max_iter = 10;
    for iter = 1:max_iter
        DeltaP_new = p_new - outside_pressure;
        Q_leak_new = effectiveC * (abs(DeltaP_new)^n_leak);
        if DeltaP_new >= 0
            leak_effect = Q_leak_new;  % air leaves house
        else
            leak_effect = -Q_leak_new; % air enters house
        end
        net_flow = Q_blower + cfm_stack - Q_exhaust - leak_effect;
        net_flow_m3s = net_flow * 0.000471947;
        p_next = p_old + dt_control * net_flow_m3s;
        if abs(p_next - p_new) < tolerance
            p_new = p_next;
            break;
        end
        p_new = p_next;
    end
    actual_pressure = p_new;
    pressure_series(cs) = actual_pressure;
    measured_pressure_series(cs) = actual_pressure;
    
    %% --- UPDATE THE PID CONTROLLER (NOW REACTING TO STACK EFFECT) ---
    error = target_pressure - actual_pressure;
    error_series(cs) = error;
    if cs == 1
        wiper = initial_wiper;
        previous_error = error;
    else
        if sign(error) ~= sign(previous_error)
            integral_error = 0;
        end
        integral_error = integral_error + error * dt_control;
        integral_error = max(-5, min(5, integral_error));
        derivative = (error - previous_error) / dt_control;
        wiper_adjustment = Kp * error + Ki * integral_error + Kd * derivative;
        wiper = wiper + 0.05 * wiper_adjustment;
        wiper = max(min_wiper, min(max_wiper, wiper));
        previous_error = error;
    end
    wiper_series(cs) = wiper;
    
    %% --- ENERGY CONSUMPTION & COST CALCULATIONS ---
    current_power = (wiper / max_wiper) * max_wattage;
    power_series(cs) = current_power;
    energy_kWh = (current_power / 1000) * (dt_control / 3600);
    current_hour_sim = mod(current_time/3600, 6);
    if (current_hour_sim >= 2 && current_hour_sim < 3.5)
        cost_rate = on_peak_rate;
    else
        cost_rate = off_peak_rate;
    end
    cost_step = energy_kWh * cost_rate;
    if cs == 1
        cumulative_cost_energy(cs) = cost_step;
    else
        cumulative_cost_energy(cs) = cumulative_cost_energy(cs-1) + cost_step;
    end
    cost_series(cs) = cumulative_cost_energy(cs);
    
    %% --- INTEGRATED HEPA FILTER SIMULATION ---
    Qfan_m3s = Qfan_series(cs) * 0.000471947;
    flux_bin1 = Qfan_m3s * conc_bin1 * eff_bin1;
    flux_bin2 = Qfan_m3s * conc_bin2 * eff_bin2;
    flux_bin3 = Qfan_m3s * conc_bin3 * eff_bin3;
    flux_bin4 = Qfan_m3s * conc_bin4 * eff_bin4;
    dust_bin1 = dust_bin1 + flux_bin1 * dt_control;
    dust_bin2 = dust_bin2 + flux_bin2 * dt_control;
    dust_bin3 = dust_bin3 + flux_bin3 * dt_control;
    dust_bin4 = dust_bin4 + flux_bin4 * dt_control;
    dust_total = dust_bin1 + dust_bin2 + dust_bin3 + dust_bin4;
    deltaP_dust = K * dust_total;
    filter_pressure = P0 + deltaP_dust;
    current_filter_cost = filter_replacement_cost * (dust_total / dust_capacity_total);
    filter_life = 100 * (1 - dust_total / dust_capacity_total);
    if filter_life < 0, filter_life = 0; end
    filter_pressure_series(cs) = filter_pressure;
    dust_total_series(cs) = dust_total;
    dust_bin1_series(cs) = dust_bin1;
    dust_bin2_series(cs) = dust_bin2;
    dust_bin3_series(cs) = dust_bin3;
    dust_bin4_series(cs) = dust_bin4;
    filter_cost_series(cs) = current_filter_cost;
    filter_life_series(cs) = filter_life;
    cumulative_cost_total(cs) = cost_series(cs) + current_filter_cost;
end

target_pressure_line = ones(size(control_time)) * target_pressure;
fprintf('Final Volumetric Flow Rate across the HEPA Filter: %.2f CFM\n', Qfan_series(end));
fprintf('Average Volumetric Flow Rate across the HEPA Filter: %.2f CFM\n', mean(Qfan_series));

%% ===============================
%% Plotting Results
%% ===============================
figure('Name','House Pressure Control Simulation 6h','NumberTitle','off');
subplot(4,1,1);
plot(control_time/3600, pressure_series, 'b-', 'LineWidth', 1.5);
hold on;
plot(control_time/3600, target_pressure_line, 'r--', 'LineWidth', 1.5);
hold off;
xlabel('Time (hours)'); ylabel('House Pressure (Pa)');
title('House Pressure vs Time (Target = User Specified)'); grid on;
subplot(4,1,2);
plot(control_time/3600, wiper_series, 'm-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Wiper Value');
title('Blower Wiper Value vs Time'); grid on;
subplot(4,1,3);
plot(control_time/3600, Qfan_series, 'r-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Blower Flow (CFM)');
title('Blower Fan Flow vs Time (HEPA Filter Flow)'); grid on;
subplot(4,1,4);
plot(control_time/3600, error_series, 'k-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Pressure Error (Pa)');
title('PID Controller Error vs Time'); grid on;

figure('Name','Stack Effect and Exhaust Fan','NumberTitle','off');
subplot(2,1,1);
plot(control_time/3600, stack_series, 'g-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Stack Effect Flow (CFM)');
title('Stack Effect Induced Flow vs Time'); grid on;
subplot(2,1,2);
plot(control_time/3600, exhaust_series, 'c-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Exhaust Fan Flow (CFM)');
title('Exhaust Fan Activation vs Time'); grid on;

figure('Name','Energy Consumption and Operating Cost','NumberTitle','off');
subplot(3,1,1);
plot(control_time/3600, power_series, 'b-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Power (W)');
title('Blower Fan Wattage vs Time'); grid on;
subplot(3,1,2);
plot(control_time/3600, cumulative_cost_total, 'r-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Cumulative Cost ($)');
title('Cumulative Operating Cost (Energy + Filter Cost)'); grid on;
subplot(3,1,3);
plot(control_time/3600, filter_life_series, 'k-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Filter Life (%)');
title('Remaining Filter Life vs Time'); grid on;

figure('Name','HEPA Filter Simulation 6h','NumberTitle','off');
subplot(3,1,1);
plot(control_time/3600, filter_pressure_series, 'r-', 'LineWidth', 2);
xlabel('Time (hours)'); ylabel('Filter Pressure Drop (Pa)');
title('HEPA Filter Pressure Drop over 6 Hours'); grid on;
subplot(3,1,2);
plot(control_time/3600, dust_total_series, 'b-', 'LineWidth', 2);
xlabel('Time (hours)'); ylabel('Total Cumulative Dust Load (g)');
title('Total Cumulative Dust Load on HEPA Filter over 6 Hours'); grid on;
subplot(3,1,3);
plot(control_time/3600, dust_bin1_series, 'm-', 'LineWidth', 1.5); hold on;
plot(control_time/3600, dust_bin2_series, 'c-', 'LineWidth', 1.5);
plot(control_time/3600, dust_bin3_series, 'g-', 'LineWidth', 1.5);
plot(control_time/3600, dust_bin4_series, 'k-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Cumulative Dust Load (g)');
title('Dust Load per Particle Size Bin on HEPA Filter over 6 Hours');
legend('0.1–0.3 µm','0.3–1 µm','1–2.5 µm','2.5–10 µm'); grid on;

%% ===============================
%% Nested Callback Functions for the GUI
%% ===============================
    function exhaustCheckboxCallback(src, ~)
        enableExhaustFan = logical(get(src, 'Value'));
    end
    function stackCheckboxCallback(src, ~)
        enableStackEffect = logical(get(src, 'Value'));
    end
    function runSimulationCallback(~, ~, blowerDoorEditHandle, targetPressureEditHandle)
        blowerDoorValue = str2double(get(blowerDoorEditHandle, 'String'));
        targetPressureValue = str2double(get(targetPressureEditHandle, 'String'));
        uiresume(gcbf);
        close(gcbf);
    end
end
