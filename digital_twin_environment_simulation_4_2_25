function digital_twin_environment_simulation_4_2_25()
% DIGITAL_TWIN_ENVIRONMENT_SIMULATION_4_2_25
% Updated to integrate correct indoor air quality model using ode45 based on validated physics.
% Now always sets initial conditions to the proper steady state values,
% includes a cost model for conditioning infiltration air,
% uses a user-defined starting OUTDOOR temperature while keeping indoor temperature fixed at 68°F,
% and modified outdoor AQI fluctuations.

%% Clear Workspace, Command Window, and Close Figures
clear; clc; close all;

%% --- Initialize Shared Variables ---
computed_dh = [];
startingOutdoorTemp_input = 68; % default starting outdoor temperature (°F)

%% --- GUI for Simulation Options ---
fluctuateTemperature = true;
fluctuatePollution = true;
blowerDoorCFM_input = 1150;
targetPollution_input = 12;

max_iter = 10;

% Increase GUI height to accommodate additional field
guiFig = figure('Name','Simulation Options','NumberTitle','off',...
    'MenuBar','none','ToolBar','none','Position',[500,500,400,370]);

% Blower Door Leakage Rate
uicontrol('Style','text','String','Blower Door Leakage Rate (CFM @ 50 Pa):',...
    'Position',[20,320,250,20],'HorizontalAlignment','left','FontSize',10);
blowerDoorEdit = uicontrol('Style','edit','String','1150',...
    'Position',[20,295,150,25],'FontSize',10);

% Target Pollutant Concentration
uicontrol('Style','text','String','Target Pollutant Concentration (µg/m^3):',...
    'Position',[20,270,280,20],'HorizontalAlignment','left','FontSize',10);
targetPollutionEdit = uicontrol('Style','edit','String','12',...
    'Position',[20,245,150,25],'FontSize',10);

% Starting Outdoor Temperature
uicontrol('Style','text','String','Starting Outdoor Temperature (°F):',...
    'Position',[20,220,280,20],'HorizontalAlignment','left','FontSize',10);
startingOutdoorTempEdit = uicontrol('Style','edit','String','68',...
    'Position',[20,195,150,25],'FontSize',10);

% Checkboxes for fluctuations
tempCheckbox = uicontrol('Style','checkbox','String','Fluctuate Temperature',...
    'Value',1,'Position',[20,160,200,30],'FontSize',10);
pollutionCheckbox = uicontrol('Style','checkbox','String','Fluctuate Air Pollution',...
    'Value',1,'Position',[20,125,200,30],'FontSize',10);

% Run Simulation Button
uicontrol('Style','pushbutton','String','Run Simulation',...
    'Position',[100,40,120,40],'FontSize',10,'Callback',@runSimCallback);

uiwait(guiFig);
    function runSimCallback(~, ~)
        fluctuateTemperature = logical(get(tempCheckbox,'Value'));
        fluctuatePollution = logical(get(pollutionCheckbox,'Value'));
        blowerDoorCFM_input = str2double(get(blowerDoorEdit,'String'));
        targetPollution_input = str2double(get(targetPollutionEdit,'String'));
        startingOutdoorTemp_input = str2double(get(startingOutdoorTempEdit,'String'));
        
        % Compute effective hydraulic diameter using test conditions
        convFactor = 0.000471947;
        Q50_m3s = blowerDoorCFM_input * convFactor;
        C_coeff = 0.65;
        deltaP_test = 50;
        rho_air = 1.2;
        v_test = sqrt((2 * deltaP_test) / rho_air);
        A_eff = Q50_m3s / (C_coeff * v_test);
        computed_dh = sqrt((4 * A_eff) / pi);
        
        msg = sprintf('Effective Hydraulic Diameter: %.3f m', computed_dh);
        
        uiresume(guiFig);
        close(guiFig);
    end

%% --- Simulation Setup ---
total_time = 21600; dt = 1;
num_steps = total_time / dt;
time = (0:num_steps-1) * dt;

convFactor = 0.000471947;
houseVolume = 2500 * 0.092903 * (8 * 0.3048);

blowerDoorCFM = blowerDoorCFM_input;
n_stack = 0.65;
H_m_stack = 15 * 0.3048;

% Indoor temperature is fixed at 68°F (293.15 K)
T_indoor_K = (68 - 32) * 5/9 + 273.15;
% T_target remains fixed for energy conditioning (293.15 K = 20°C)
T_target = 293.15;  

effectiveC = blowerDoorCFM / (50^n_stack);

% Outdoor Temperature: generated using the user-defined starting outdoor temperature as baseline
if fluctuateTemperature
    T_outdoor_data = startingOutdoorTemp_input + 10 * sin(2*pi*(time/total_time));
else
    T_outdoor_data = startingOutdoorTemp_input * ones(size(time));
end

% Modified outdoor AQI function: 8 peaks during simulation, 30% larger amplitude
if fluctuatePollution
    C_outdoor_data = 12 + 2.6 * sin(8*2*pi*(time/total_time));
else
    C_outdoor_data = zeros(size(time));
end

targetPollution = targetPollution_input;

%% --- Energy Conditioning and Cost Parameters ---
% Constants for energy required to condition infiltration air
rho_cond = 1.2;       % Air density (kg/m^3)
c_p = 1005;           % Specific heat capacity (J/(kg·K))
COP_AC = 3;           % Coefficient of performance for cooling
eff_heater = 0.9;     % Efficiency for heating
startHour = 8;        % Simulation start time (8 AM)

% Preallocate cumulative cost vector
cumulativeEnergyCost = zeros(1, num_steps);

%% --- Compute Steady State Initial Conditions ---
% These conditions are computed based on the t = 0 environment.
T_outdoor_K_0 = (T_outdoor_data(1) - 32) * 5/9 + 273.15;
rho_outdoor_0 = 101325 / (287 * T_outdoor_K_0);
deltaP_stack_0 = rho_outdoor_0 * 9.81 * H_m_stack * ((T_indoor_K / T_outdoor_K_0) - 1);
cfm_stack_0 = abs(blowerDoorCFM * (abs(deltaP_stack_0) / 50)^n_stack);
steadyStatePressure = (cfm_stack_0 / effectiveC)^(1/n_stack);

% Indoor air quality steady state
Q_total0 = cfm_stack_0 * convFactor * 3600; % m^3/h at t=0
C_out0 = C_outdoor_data(1);

k_PM3 = -log(1 - 0.35);
k_PM10 = -log(1 - 0.75);

if Q_total0 == 0
    steadyState_PM3 = 0;
    steadyState_PM10 = 0;
else
    steadyState_PM3 = ((Q_total0/houseVolume) / ((Q_total0/houseVolume) + k_PM3)) * C_out0;
    steadyState_PM10 = ((Q_total0/houseVolume) / ((Q_total0/houseVolume) + k_PM10)) * C_out0;
end

%% --- Simulation Loop ---
housePressure = nan(1, num_steps);
infiltrationFlow = nan(1, num_steps);
cumulativePollutionTime = zeros(1, num_steps);

for i = 1:num_steps
    % Calculate outdoor temperature in Kelvin for current time step
    T_outdoor_K = (T_outdoor_data(i) - 32)*5/9 + 273.15;
    rho_outdoor = 101325 / (287 * T_outdoor_K);
    deltaP_stack = rho_outdoor * 9.81 * H_m_stack * ((T_indoor_K / T_outdoor_K) - 1);
    cfm_stack = abs(blowerDoorCFM * (abs(deltaP_stack)/50)^n_stack);
    infiltrationFlow(i) = cfm_stack;
    
    if i == 1
        housePressure(i) = steadyStatePressure;
    else
        housePressure(i) = housePressure(i-1) + dt * (cfm_stack - effectiveC * (abs(housePressure(i-1))^n_stack)) * convFactor;
    end
    
    if C_outdoor_data(i) > targetPollution
        cumulativePollutionTime(i) = (i > 1) * cumulativePollutionTime(i-1) + dt;
    elseif i > 1
        cumulativePollutionTime(i) = cumulativePollutionTime(i-1);
    end
    
    %% Energy Required to Condition Infiltration Air and Operating Cost
    Q_inf_m3s = infiltrationFlow(i) * convFactor;  % Convert CFM to m^3/s
    power = Q_inf_m3s * rho_cond * c_p * abs(T_target - T_outdoor_K); % in Watts
    
    if T_outdoor_K > T_target  % Cooling required
        energy = power / COP_AC * dt;  % Energy in Joules for this time step
        % Determine current time-of-day for electricity pricing
        current_hour = mod(startHour + time(i)/3600, 24);
        if current_hour >= 14 && current_hour < 19
            cost_rate = 0.313;  % On-Peak rate ($/kWh)
        else
            cost_rate = 0.0929; % Off-Peak rate ($/kWh)
        end
        energy_kWh = energy / 3.6e6;  % Convert Joules to kWh
        cost = energy_kWh * cost_rate;
    elseif T_outdoor_K < T_target  % Heating required
        energy = power / eff_heater * dt;  % Energy in Joules for this time step
        therms = energy / (105.5e6);        % Convert Joules to therms
        cost = therms * 1.50;
    else
        cost = 0;
    end
    
    if i == 1
        cumulativeEnergyCost(i) = cost;
    else
        cumulativeEnergyCost(i) = cumulativeEnergyCost(i-1) + cost;
    end
end

%% Indoor AQ Model using Backward Euler with Wall Deposition (Dynamic Q)
% Convert simulation time from seconds to hours
time_hours = time / 3600;
% Q_total_m3ph: dynamic air exchange rate in m^3/h computed from infiltrationFlow
Q_total_m3ph = infiltrationFlow * convFactor * 3600;

% Set the time step for the Euler integration in hours
dt_b = dt / 3600;  % dt was in seconds, so dt_b is in hours
N_b = length(time_hours);

% Preallocate arrays for indoor concentrations
C_i_PM3_BE = zeros(1, N_b);
C_i_PM10_BE = zeros(1, N_b);
% Use the computed steady state values as the initial conditions
C_i_PM3_BE(1) = steadyState_PM3;
C_i_PM10_BE(1) = steadyState_PM10;

for n = 1:(N_b - 1)
    % Get the dynamic air exchange rate at the next time step (m^3/h)
    Q_current = Q_total_m3ph(n+1);
    
    % Evaluate outdoor concentration at the next time step via interpolation
    C_out_next = interp1(time_hours, C_outdoor_data, time_hours(n+1), 'linear', 'extrap');
    
    % Backward Euler update for PM1.0–3.0
    C_i_PM3_BE(n+1) = ( C_i_PM3_BE(n) + dt_b*(Q_current/houseVolume)*C_out_next ) / ...
                       ( 1 + dt_b*((Q_current/houseVolume) + k_PM3) );
    
    % Backward Euler update for PM3.0–10.0
    C_i_PM10_BE(n+1) = ( C_i_PM10_BE(n) + dt_b*(Q_current/houseVolume)*C_out_next ) / ...
                        ( 1 + dt_b*((Q_current/houseVolume) + k_PM10) );
end

% For plotting, assign these new values to the indoor AQ variables:
indoorAQ_PM3 = C_i_PM3_BE;
indoorAQ_PM10 = C_i_PM10_BE;


%% Plotting
figure('Name','Digital Twin Environmental Simulation (No Intervention)','NumberTitle','off');
subplot(3,2,1);
plot(time_hours, T_outdoor_data, 'b-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Temperature (\circF)'); title('Outdoor Temperature'); grid on;

subplot(3,2,2);
plot(time_hours, C_outdoor_data, 'k--', 'LineWidth', 1.5); hold on;
plot(time_hours, indoorAQ_PM3, 'b-', 'LineWidth', 1.5);
plot(time_hours, indoorAQ_PM10, 'r-', 'LineWidth', 1.5);
yline(targetPollution, 'r--', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Concentration (\mug/m^3)');
title('Indoor vs Outdoor Air Quality');
legend('Outdoor', 'Indoor PM_{1.0-3.0}', 'Indoor PM_{3.0-10.0}', 'Target'); grid on;

subplot(3,2,3);
yyaxis left; plot(time_hours, infiltrationFlow, 'r-', 'LineWidth', 1.5);
ylabel('Infiltration Flow (CFM)');
yyaxis right; plot(time_hours, housePressure, 'm-', 'LineWidth', 1.5);
ylabel('House Pressure (Pa)');
xlabel('Time (hours)'); title('Infiltration & Pressure'); grid on;

subplot(3,2,4); axis off;
text(0.1,0.5, sprintf('Effective Hydraulic Diameter:\n%.3f m', computed_dh), 'FontSize',12, 'EdgeColor','black', 'BackgroundColor','w');
title('Effective Hydraulic Diameter');

subplot(3,2,5);
plot(time_hours, cumulativeEnergyCost, 'c-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Cumulative Cost ($)');
title('Cost to Condition Air'); grid on;

subplot(3,2,6);
plot(time_hours, cumulativePollutionTime/3600, 'm-', 'LineWidth', 1.5);
xlabel('Time (hours)'); ylabel('Cumulative Time (h)');
title('Pollution Duration'); grid on;

end
